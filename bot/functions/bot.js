// bot/functions/bot.js (–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ10: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω getOrCreateUser –∏ analyzeDream/Gemini)

// --- –ò–º–ø–æ—Ä—Ç—ã ---
const { Bot, Api, GrammyError, HttpError, webhookCallback } = require("grammy");
const { createClient } = require("@supabase/supabase-js");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const crypto = require('crypto');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è ---
const BOT_TOKEN = process.env.VITE_BOT_TOKEN;
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_API_KEY = process.env.VITE_GEMINI_API_KEY;
const TMA_URL = process.env.VITE_TMA_URL;

// --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
let bot;
let supabaseAdmin;
let genAI; // –¢–æ–ª—å–∫–æ –∏–Ω—Å—Ç–∞–Ω—Å GoogleGenerativeAI
let geminiModel = null; // –°–∞–º model –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
let initializationError = null;
let botInitializedAndHandlersSet = false;

try {
    console.log("[Bot Global Init] Starting initialization...");
    if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !GEMINI_API_KEY || !TMA_URL) {
        throw new Error("FATAL: Missing one or more environment variables!");
    }

    supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { autoRefreshToken: false, persistSession: false } });
    genAI = new GoogleGenerativeAI(GEMINI_API_KEY); // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç Google AI
    bot = new Bot(BOT_TOKEN);
    console.log("[Bot Global Init] Clients and bot instance created.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    console.log("[Bot Global Init] Setting up handlers...");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    bot.command("start", async (ctx) => {
        console.log("[Bot Handler /start] Command received.");
        const userId = ctx.from?.id; const chatId = ctx.chat.id;
        if (!userId || !chatId) { console.warn("[Bot Handler /start] No user ID or chat ID."); return; }
        console.log(`[Bot Handler /start] User ${userId} in chat ${chatId}`);
        try {
            // <<<--- –í–ê–ñ–ù–û: –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–º–µ–Ω–Ω–æ –æ—Ç getOrCreateUser ---
            const userData = await getOrCreateUser(supabaseAdmin, userId);
            console.log(`[Bot Handler /start] User data received: ID=${userData.id}, Claimed=${userData.claimed}, LastMsgId=${userData.lastMessageId}`);
            // <<<--- –ö–û–ù–ï–¶ –í–ê–ñ–ù–û–ì–û ---

            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (userData.lastMessageId) { /* ... (–ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ }
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
            let messageText, buttonText, buttonUrl;
            if (userData.claimed) { messageText = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–Ω—ã –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –õ–ö."; buttonText = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"; buttonUrl = TMA_URL; }
            else { messageText = "–ü—Ä–∏–≤–µ—Ç! üëã –ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!"; buttonText = "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"; buttonUrl = `${TMA_URL}?action=claim_reward`; }
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log(`[Bot Handler /start] Sending new message (Claimed: ${userData.claimed})`);
            const sentMessage = await ctx.reply(messageText, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [[{ text: buttonText, web_app: { url: buttonUrl } }]] } });
            console.log(`[Bot Handler /start] New message sent. ID: ${sentMessage.message_id}`);
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const { error: updateError } = await supabaseAdmin.from('users').update({ last_start_message_id: sentMessage.message_id }).eq('id', userData.id);
            if (updateError) console.error(`[Bot Handler /start] Failed update last_start_message_id:`, updateError);
            else console.log(`[Bot Handler /start] Updated last_start_message_id to ${sentMessage.message_id}.`);
        } catch (e) { // <<<--- –õ–æ–≤–∏–º –æ—à–∏–±–∫—É, –ø—Ä–æ–±—Ä–æ—à–µ–Ω–Ω—É—é –∏–∑ getOrCreateUser ---
             console.error("[Bot Handler /start] CRITICAL Error (likely from getOrCreateUser):", e.message); // –õ–æ–≥–∏—Ä—É–µ–º –ö–û–ù–ö–†–ï–¢–ù–£–Æ –æ—à–∏–±–∫—É
             try { await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${e.message}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`).catch(logReplyError); } catch {}
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ü–ï–†–ï–î–ê–ï–ú geminiModel)
    bot.on("message:text", async (ctx) => {
        console.log("[Bot Handler text] Received text message.");
        const dreamText = ctx.message.text; const userId = ctx.from?.id; const chatId = ctx.chat.id; const messageId = ctx.message.message_id;
        if (!userId || !chatId) { console.warn("[Bot Handler text] No user/chat ID."); return; }
        if (dreamText.startsWith('/')) { console.log(`[Bot Handler text] Ignoring command.`); return; }
        console.log(`[Bot Handler text] Processing dream for ${userId}`);
        let statusMessage;
        try {
            console.log(`[Bot Handler text] Deleting user message ${messageId}`);
            await ctx.api.deleteMessage(chatId, messageId).catch(delErr => { /* ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è ... */});
            statusMessage = await ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω... üß†‚ú®").catch(logReplyError);
            if (!statusMessage) throw new Error("Failed to send status message.");
            // <<<--- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ï–†–ï–î–ê–ï–ú geminiModel –≤ analyzeDream ---
            await analyzeDream(ctx, supabaseAdmin, geminiModel, dreamText); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ null) geminiModel
            // <<<--- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            console.log(`[Bot Handler text] Deleting status message ${statusMessage.message_id}`);
            await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(delErr => { console.warn(`[Bot Handler text] Failed delete status msg ${statusMessage.message_id}:`, delErr); });
            console.log(`[Bot Handler text] Analysis complete. Sending confirmation.`);
            await ctx.reply("–í–∞—à –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ –≥–æ—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚ú®\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –õ–ö.", { reply_markup: { inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app: { url: TMA_URL } }]] } }).catch(logReplyError);
        } catch (error) { // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ analyzeDream
            console.error(`[Bot Handler text] Error processing dream for ${userId}:`, error); // –õ–æ–≥–∏—Ä—É–µ–º –ö–û–ù–ö–†–ï–¢–ù–£–Æ –æ—à–∏–±–∫—É
            if (statusMessage) { await ctx.api.deleteMessage(chatId, statusMessage.message_id).catch(e => {}); }
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`).catch(logReplyError); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        }
    });

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bot.on('pre_checkout_query', async (ctx) => { /* ... */ });
    bot.on('message:successful_payment', async (ctx) => { /* ... */ });
    bot.catch((err) => { /* ... */ });

    console.log("[Bot Global Init] Handlers setup complete.");
    botInitializedAndHandlersSet = true;

} catch (error) {
    console.error("[Bot Global Init] CRITICAL INITIALIZATION ERROR:", error);
    initializationError = error;
    bot = null;
    botInitializedAndHandlersSet = false;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ ---

// getOrCreateUser (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω catch –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ try)
async function getOrCreateUser(supabase, userId) {
    if (!supabase) { throw new Error("Supabase client not provided to getOrCreateUser."); } // –ë–æ–ª–µ–µ —á–µ—Ç–∫–∞—è –æ—à–∏–±–∫–∞
    console.log(`[getOrCreateUser] Processing user ${userId}...`);
    try {
        console.log(`[getOrCreateUser] Selecting user ${userId}...`);
        let { data: existingUser, error: selectError } = await supabase
            .from('users').select('id, channel_reward_claimed, last_start_message_id').eq('tg_id', userId).single();

        if (selectError && selectError.code !== 'PGRST116') {
             console.error(`[getOrCreateUser] Supabase SELECT error: ${selectError.message}`);
             throw new Error(`DB Select Error: ${selectError.message}`); // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }
        if (existingUser) {
            console.log(`[getOrCreateUser] Found existing user ${userId}.`);
            return { id: existingUser.id, claimed: existingUser.channel_reward_claimed ?? false, lastMessageId: existingUser.last_start_message_id };
        } else {
            console.log(`[getOrCreateUser] User ${userId} not found. Creating...`);
            const { data: newUser, error: insertError } = await supabase
                .from('users').insert({ tg_id: userId, subscription_type: 'free', tokens: 0, channel_reward_claimed: false }).select('id').single();

            if (insertError) {
                 console.error(`[getOrCreateUser] Supabase INSERT error: ${insertError.message}`);
                 if (insertError.code === '23505') { // Race condition
                     console.warn(`[getOrCreateUser] Race condition for ${userId}. Re-fetching...`);
                     let { data: raceUser, error: raceError } = await supabase.from('users').select('id, channel_reward_claimed, last_start_message_id').eq('tg_id', userId).single();
                     if (raceError) { throw new Error(`DB Re-fetch Error: ${raceError.message}`); } // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ
                     if (raceUser) { console.log(`[getOrCreateUser] Found user ${userId} on re-fetch.`); return { id: raceUser.id, claimed: raceUser.channel_reward_claimed ?? false, lastMessageId: raceUser.last_start_message_id }; }
                     else { throw new Error("DB Inconsistent state after unique violation."); } // –°—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                 }
                 throw new Error(`DB Insert Error: ${insertError.message}`); // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
            }
            if (!newUser) { throw new Error("DB Insert Error: No data returned after user creation."); } // –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç ID
            console.log(`[getOrCreateUser] Created new user ${userId} with ID ${newUser.id}.`);
            return { id: newUser.id, claimed: false, lastMessageId: null };
        }
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –í–ù–£–¢–†–ò try –±–ª–æ–∫–∞ –∏–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–±—Ä–æ—à–µ–Ω–∞
        console.error(`[getOrCreateUser] FAILED for user ${userId}:`, error);
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –µ–µ –ø–æ–π–º–∞–ª catch –≤ /start
        throw error; // <<<--- –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    }
}


// getGeminiAnalysis (–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async function getGeminiAnalysis(passedModel, dreamText) {
     console.log("[getGeminiAnalysis] Function called.");
     let modelToUse = passedModel; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

     // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å
     if (!modelToUse) {
         console.log("[getGeminiAnalysis] Model not passed or null, attempting initialization...");
         try {
             if (!genAI) { throw new Error("GoogleGenerativeAI instance (genAI) is not available."); }
             modelToUse = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
             // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –≠–¢–û–ì–û –ñ–ï –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Ñ—É–Ω–∫—Ü–∏–∏
             // (–Ω–æ –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ Netlify —Ñ—É–Ω–∫—Ü–∏–∏)
             geminiModel = modelToUse;
             console.log("[getGeminiAnalysis] Gemini model initialized successfully within function.");
         } catch (initErr) {
             console.error("[getGeminiAnalysis] Failed to initialize Gemini model:", initErr);
             throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞: ${initErr.message}`); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
         }
     } else {
          console.log("[getGeminiAnalysis] Using pre-initialized/passed model.");
     }

     // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞
     const MAX_DREAM_LENGTH = 4000;
     if (!dreamText || dreamText.trim().length === 0) { throw new Error("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–Ω–∞."); }
     if (dreamText.length > MAX_DREAM_LENGTH) { throw new Error(`–°–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${MAX_DREAM_LENGTH} —Å–∏–º–≤.).`); }

     // –í—ã–∑–æ–≤ API Gemini
     try {
         console.log("[getGeminiAnalysis] Requesting Gemini analysis...");
         const prompt = `–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞—è –º–µ–¥. –¥–∏–∞–≥–Ω–æ–∑–æ–≤/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–Ω: "${dreamText}". –ê–Ω–∞–ª–∏–∑ (2-4 –∞–±–∑–∞—Ü–∞): 1. –°–∏–º–≤–æ–ª—ã/–∑–Ω–∞—á–µ–Ω–∏—è. 2. –≠–º–æ—Ü–∏–∏/—Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). 3. –¢–µ–º—ã/—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.`;
         const result = await modelToUse.generateContent(prompt); // –ò—Å–ø–æ–ª—å–∑—É–µ–º modelToUse
         const response = await result.response;

         if (response.promptFeedback?.blockReason) {
             console.warn(`[getGeminiAnalysis] Gemini blocked: ${response.promptFeedback.blockReason}`);
             throw new Error(`–ê–Ω–∞–ª–∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (${response.promptFeedback.blockReason}).`); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
         }
         const analysisText = response.text();
         if (!analysisText || analysisText.trim().length === 0) {
             console.error("[getGeminiAnalysis] Gemini returned empty response.");
             throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞."); // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
         }
         console.log("[getGeminiAnalysis] Gemini analysis received successfully.");
         return analysisText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–ï–ö–°–¢ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
     } catch (error) {
         console.error("[getGeminiAnalysis] Error during Gemini API call:", error);
         // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
         if (error.message?.includes("API key not valid")) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API Gemini.");
         else if (error.status === 404 || error.message?.includes("404") || error.message?.includes("is not found")) throw new Error("–ú–æ–¥–µ–ª—å Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
         else if (error.message?.includes("quota")) throw new Error("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ Gemini API.");
         // –û–±—â–∞—è –æ—à–∏–±–∫–∞ API
         throw new Error(`–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞ (${error.message})`);
     }
}


// analyzeDream (–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å, –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ –¥–∞–ª—å—à–µ, –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏)
async function analyzeDream(ctx, supabase, passedGeminiModel, dreamText) {
    console.log("[analyzeDream] Function called."); // –õ–æ–≥ –≤—Ö–æ–¥–∞
    const userId = ctx.from?.id;
    if (!userId) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); }

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
        console.log(`[analyzeDream] Getting user DB ID for ${userId}...`);
        const userData = await getOrCreateUser(supabase, userId);
        const userDbId = userData.id;
        if (!userDbId) { throw new Error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); }
        console.log(`[analyzeDream] User DB ID: ${userDbId}`);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        console.log(`[analyzeDream] Checking/decrementing token for ${userId}...`);
        const { data: tokenDecremented, error: rpcError } = await supabase
            .rpc('decrement_token_if_available', { user_tg_id: userId });
        if (rpcError) { throw new Error(`–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${rpcError.message}`); }
        if (!tokenDecremented) { throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."); }
        console.log(`[analyzeDream] Token decremented for user ${userId}.`);

        // 3. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini (–ø–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å, –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏)
        console.log(`[analyzeDream] Requesting analysis...`);
        // <<<--- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º passedGeminiModel ---
        const analysisResultText = await getGeminiAnalysis(passedGeminiModel, dreamText);
        // <<<--- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        console.log(`[analyzeDream] Analysis received successfully.`); // –õ–æ–≥ —É—Å–ø–µ—Ö–∞

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
        console.log(`[analyzeDream] Saving analysis to DB for user ${userDbId}...`);
        const { error: insertError } = await supabase
            .from('analyses').insert({ user_id: userDbId, dream_text: dreamText, analysis: analysisResultText });
        if (insertError) { throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${insertError.message}`); }
        console.log(`[analyzeDream] Analysis saved successfully.`);

        return; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    } catch (error) {
        // –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –±–ª–æ–∫–∞ try –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö
        console.error(`[analyzeDream] FAILED for user ${userId}: ${error.message}`);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ 'message:text'
    }
}

// logReplyError (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function logReplyError(error) { console.error("[Bot Reply Error]", error instanceof Error ? error.message : error); }


// --- –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Netlify —Å webhookCallback ---
// (–ö–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ü–æ–ø—ã—Ç–∫–æ–π #9)
let netlifyWebhookHandler = null;
if (botInitializedAndHandlersSet && bot) {
    try {
        netlifyWebhookHandler = webhookCallback(bot, 'aws-lambda-async');
        console.log("[Bot Global Init] webhookCallback created successfully.");
    } catch (callbackError) { console.error("[Bot Global Init] FAILED TO CREATE webhookCallback:", callbackError); initializationError = callbackError; }
} else { console.error("[Bot Global Init] Skipping webhookCallback creation due to errors."); }

exports.handler = async (event) => {
    console.log("[Netlify Handler] Invoked.");
    if (initializationError || !netlifyWebhookHandler) { console.error("[Netlify Handler] Initialization/webhookCallback failed.", initializationError); return { statusCode: 500, body: "Internal Server Error: Bot failed to initialize." }; }
    console.log("[Netlify Handler] Calling pre-created webhookCallback handler...");
    return netlifyWebhookHandler(event);
};

console.log("[Bot Global Init] Netlify handler exported.");
